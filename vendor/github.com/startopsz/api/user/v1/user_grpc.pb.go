// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: user/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_GetRegisterUserVerifyCode_FullMethodName       = "/user.v1.User/GetRegisterUserVerifyCode"
	User_Register_FullMethodName                        = "/user.v1.User/Register"
	User_ExistUser_FullMethodName                       = "/user.v1.User/ExistUser"
	User_GetForgotPasswdVerifyCode_FullMethodName       = "/user.v1.User/GetForgotPasswdVerifyCode"
	User_GetUpdateUserPasswdVerifyCode_FullMethodName   = "/user.v1.User/GetUpdateUserPasswdVerifyCode"
	User_UpdateForgotPasswd_FullMethodName              = "/user.v1.User/UpdateForgotPasswd"
	User_UpdateUserPasswd_FullMethodName                = "/user.v1.User/UpdateUserPasswd"
	User_GetLoginVerifyCode_FullMethodName              = "/user.v1.User/GetLoginVerifyCode"
	User_LoginByVerifyCode_FullMethodName               = "/user.v1.User/LoginByVerifyCode"
	User_Login_FullMethodName                           = "/user.v1.User/Login"
	User_Logout_FullMethodName                          = "/user.v1.User/Logout"
	User_GetUserByToken_FullMethodName                  = "/user.v1.User/GetUserByToken"
	User_GetUserByUuid_FullMethodName                   = "/user.v1.User/GetUserByUuid"
	User_CreateOrganization_FullMethodName              = "/user.v1.User/CreateOrganization"
	User_DelOrganization_FullMethodName                 = "/user.v1.User/DelOrganization"
	User_UserJoinOrganization_FullMethodName            = "/user.v1.User/UserJoinOrganization"
	User_GetUserJoinOrganizationHis_FullMethodName      = "/user.v1.User/GetUserJoinOrganizationHis"
	User_GetOrganizationJoinHis_FullMethodName          = "/user.v1.User/GetOrganizationJoinHis"
	User_ManageUserJoinOrganization_FullMethodName      = "/user.v1.User/ManageUserJoinOrganization"
	User_UserLeaveOrganization_FullMethodName           = "/user.v1.User/UserLeaveOrganization"
	User_EvictionUserOrganization_FullMethodName        = "/user.v1.User/EvictionUserOrganization"
	User_GetOrganizationUser_FullMethodName             = "/user.v1.User/GetOrganizationUser"
	User_GetUserOrganization_FullMethodName             = "/user.v1.User/GetUserOrganization"
	User_GetUserOrganizationInfo_FullMethodName         = "/user.v1.User/GetUserOrganizationInfo"
	User_VerifyUserInOrg_FullMethodName                 = "/user.v1.User/VerifyUserInOrg"
	User_AddOrganizationDingTalk_FullMethodName         = "/user.v1.User/AddOrganizationDingTalk"
	User_GetOrganizationDingTalk_FullMethodName         = "/user.v1.User/GetOrganizationDingTalk"
	User_DelOrganizationDingTalk_FullMethodName         = "/user.v1.User/DelOrganizationDingTalk"
	User_GetOrganizationDingTalkToken_FullMethodName    = "/user.v1.User/GetOrganizationDingTalkToken"
	User_AddOrganizationDingTalkLogin_FullMethodName    = "/user.v1.User/AddOrganizationDingTalkLogin"
	User_GetOrganizationDingTalkLogin_FullMethodName    = "/user.v1.User/GetOrganizationDingTalkLogin"
	User_DelOrganizationDingTalkLogin_FullMethodName    = "/user.v1.User/DelOrganizationDingTalkLogin"
	User_GetOrganizationDingTalkLoginUrl_FullMethodName = "/user.v1.User/GetOrganizationDingTalkLoginUrl"
	User_OrganizationDingTalkLogin_FullMethodName       = "/user.v1.User/OrganizationDingTalkLogin"
	User_GetOrganizationDingTalkUser_FullMethodName     = "/user.v1.User/GetOrganizationDingTalkUser"
	User_EncryptionWithSalt_FullMethodName              = "/user.v1.User/EncryptionWithSalt"
	User_DecryptionWithSalt_FullMethodName              = "/user.v1.User/DecryptionWithSalt"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 1.1 注册用户
	GetRegisterUserVerifyCode(ctx context.Context, in *GetRegisterUserVerifyCodeReq, opts ...grpc.CallOption) (*GetRegisterUserVerifyCodeReply, error)
	Register(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserReply, error)
	//rpc RegisterFromDingTalk (RegisterDingTalkUserReq) returns (RegisterDingTalkUserReply) {};
	// 1.2 验证用户是否存在
	ExistUser(ctx context.Context, in *ExistUserReq, opts ...grpc.CallOption) (*ExistUserReply, error)
	// 1.3 更新用户密码
	// 获取忘记密码/更新密码验证码
	GetForgotPasswdVerifyCode(ctx context.Context, in *GetForgotPasswdVerifyCodeReq, opts ...grpc.CallOption) (*GetForgotPasswdVerifyCodeReply, error)
	GetUpdateUserPasswdVerifyCode(ctx context.Context, in *GetUpdateUserPasswdVerifyCodeReq, opts ...grpc.CallOption) (*GetUpdateUserPasswdVerifyCodeReply, error)
	UpdateForgotPasswd(ctx context.Context, in *UpdateForgotPasswdReq, opts ...grpc.CallOption) (*UpdateForgotPasswdReply, error)
	UpdateUserPasswd(ctx context.Context, in *UpdateUserPasswdReq, opts ...grpc.CallOption) (*UpdateUserPasswdReply, error)
	// 1.4 用户登录
	GetLoginVerifyCode(ctx context.Context, in *GetLoginVerifyCodeReq, opts ...grpc.CallOption) (*GetLoginVerifyCodeReply, error)
	LoginByVerifyCode(ctx context.Context, in *LoginByVerifyCodeReq, opts ...grpc.CallOption) (*LoginByVerifyCodeReply, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 1.5 用户登出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
	// 1.6 使用Token获取用户信息
	GetUserByToken(ctx context.Context, in *GetUserByTokenReq, opts ...grpc.CallOption) (*GetUserByTokenReply, error)
	// 1.7 通过Uuid获取用户信息 - 因为没有鉴权，调用方需要确认严格确认是否需要调用该接口
	GetUserByUuid(ctx context.Context, in *GetUserByUuidReq, opts ...grpc.CallOption) (*GetUserByUuidReply, error)
	// 2. organization
	// 2.1 创建组织
	CreateOrganization(ctx context.Context, in *CreateOrganizationReq, opts ...grpc.CallOption) (*CreateOrganizationReply, error)
	// 获取组织
	//rpc GetOrganization (GetOrganizationReq) returns (GetOrganizationReply) {};
	// 2.2 删除组织
	DelOrganization(ctx context.Context, in *DelOrganizationReq, opts ...grpc.CallOption) (*DelOrganizationReply, error)
	// 2.3.1 用户加入组织
	UserJoinOrganization(ctx context.Context, in *UserJoinOrganizationReq, opts ...grpc.CallOption) (*UserJoinOrganizationReply, error)
	// 2.3.2 获取用户加入组织历史 - 用户访问
	GetUserJoinOrganizationHis(ctx context.Context, in *GetUserJoinOrganizationHisReq, opts ...grpc.CallOption) (*GetUserJoinOrganizationHisReply, error)
	// 2.3.3 获取组织被用户申请历史 - 组织管理员访问
	GetOrganizationJoinHis(ctx context.Context, in *GetOrganizationJoinHisReq, opts ...grpc.CallOption) (*GetOrganizationJoinHisReply, error)
	// 2.3.4 管理用户加入组织 - 组织管理员访问 - 同意/拒绝用户加入
	ManageUserJoinOrganization(ctx context.Context, in *ManageUserJoinOrganizationReq, opts ...grpc.CallOption) (*ManageUserJoinOrganizationReply, error)
	// 2.4 用户离开组织
	UserLeaveOrganization(ctx context.Context, in *UserLeaveOrganizationReq, opts ...grpc.CallOption) (*UserLeaveOrganizationReply, error)
	// 2.5 驱逐用户离开组织
	EvictionUserOrganization(ctx context.Context, in *EvictionUserOrganizationReq, opts ...grpc.CallOption) (*EvictionUserOrganizationReply, error)
	// 2.6.1 获取组织内用户
	GetOrganizationUser(ctx context.Context, in *GetOrganizationUserReq, opts ...grpc.CallOption) (*GetOrganizationUserReply, error)
	// 2.6.2 获取用户的组织
	GetUserOrganization(ctx context.Context, in *GetUserOrganizationReq, opts ...grpc.CallOption) (*GetUserOrganizationReply, error)
	// 获取用户 组织uuid 的信息
	GetUserOrganizationInfo(ctx context.Context, in *GetUserOrganizationInfoReq, opts ...grpc.CallOption) (*GetUserOrganizationInfoReply, error)
	// 2.7 验证用户在组织内
	VerifyUserInOrg(ctx context.Context, in *VerifyUserInOrgReq, opts ...grpc.CallOption) (*VerifyUserInOrgReply, error)
	// 2.8 组织钉钉配置
	// 2.8.1 添加组织钉钉配置
	AddOrganizationDingTalk(ctx context.Context, in *AddOrganizationDingTalkReq, opts ...grpc.CallOption) (*AddOrganizationDingTalkReply, error)
	// 2.8.2 获取组织钉钉配置
	GetOrganizationDingTalk(ctx context.Context, in *GetOrganizationDingTalkReq, opts ...grpc.CallOption) (*GetOrganizationDingTalkReply, error)
	// 2.8.3 删除组织钉钉配置
	DelOrganizationDingTalk(ctx context.Context, in *DelOrganizationDingTalkReq, opts ...grpc.CallOption) (*DelOrganizationDingTalkReply, error)
	// 2.8.4 获取组织钉钉token
	GetOrganizationDingTalkToken(ctx context.Context, in *GetOrganizationDingTalkTokenReq, opts ...grpc.CallOption) (*GetOrganizationDingTalkTokenReply, error)
	// 2.9 组织钉钉登录
	// 2.9.1 添加组织钉钉登录信息
	AddOrganizationDingTalkLogin(ctx context.Context, in *AddOrganizationDingTalkLoginReq, opts ...grpc.CallOption) (*AddOrganizationDingTalkLoginReply, error)
	// 2.9.2 添加组织钉钉登录信息
	GetOrganizationDingTalkLogin(ctx context.Context, in *GetOrganizationDingTalkLoginReq, opts ...grpc.CallOption) (*GetOrganizationDingTalkLoginReply, error)
	// 2.9.3 添加组织钉钉登录信息
	DelOrganizationDingTalkLogin(ctx context.Context, in *DelOrganizationDingTalkLoginReq, opts ...grpc.CallOption) (*DelOrganizationDingTalkLoginReply, error)
	// 2.9.4 获取钉钉登录Url
	GetOrganizationDingTalkLoginUrl(ctx context.Context, in *GetOrganizationDingTalkLoginUrlReq, opts ...grpc.CallOption) (*GetOrganizationDingTalkLoginUrlReply, error)
	// 2.9.5 钉钉登录-钉钉服务回调请求
	OrganizationDingTalkLogin(ctx context.Context, in *OrganizationDingTalkLoginReq, opts ...grpc.CallOption) (*OrganizationDingTalkLoginReply, error)
	// 2.9.6 获取用户组织钉钉用户信息
	GetOrganizationDingTalkUser(ctx context.Context, in *GetOrganizationDingTalkUserReq, opts ...grpc.CallOption) (*GetOrganizationDingTalkUserReply, error)
	// 3.1 使用 salt 加密字符串
	EncryptionWithSalt(ctx context.Context, in *EncryptionWithSaltReq, opts ...grpc.CallOption) (*EncryptionWithSaltReply, error)
	// 3.2 使用 salt 解密字符串
	DecryptionWithSalt(ctx context.Context, in *DecryptionWithSaltReq, opts ...grpc.CallOption) (*DecryptionWithSaltReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetRegisterUserVerifyCode(ctx context.Context, in *GetRegisterUserVerifyCodeReq, opts ...grpc.CallOption) (*GetRegisterUserVerifyCodeReply, error) {
	out := new(GetRegisterUserVerifyCodeReply)
	err := c.cc.Invoke(ctx, User_GetRegisterUserVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Register(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserReply, error) {
	out := new(RegisterUserReply)
	err := c.cc.Invoke(ctx, User_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ExistUser(ctx context.Context, in *ExistUserReq, opts ...grpc.CallOption) (*ExistUserReply, error) {
	out := new(ExistUserReply)
	err := c.cc.Invoke(ctx, User_ExistUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetForgotPasswdVerifyCode(ctx context.Context, in *GetForgotPasswdVerifyCodeReq, opts ...grpc.CallOption) (*GetForgotPasswdVerifyCodeReply, error) {
	out := new(GetForgotPasswdVerifyCodeReply)
	err := c.cc.Invoke(ctx, User_GetForgotPasswdVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUpdateUserPasswdVerifyCode(ctx context.Context, in *GetUpdateUserPasswdVerifyCodeReq, opts ...grpc.CallOption) (*GetUpdateUserPasswdVerifyCodeReply, error) {
	out := new(GetUpdateUserPasswdVerifyCodeReply)
	err := c.cc.Invoke(ctx, User_GetUpdateUserPasswdVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateForgotPasswd(ctx context.Context, in *UpdateForgotPasswdReq, opts ...grpc.CallOption) (*UpdateForgotPasswdReply, error) {
	out := new(UpdateForgotPasswdReply)
	err := c.cc.Invoke(ctx, User_UpdateForgotPasswd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserPasswd(ctx context.Context, in *UpdateUserPasswdReq, opts ...grpc.CallOption) (*UpdateUserPasswdReply, error) {
	out := new(UpdateUserPasswdReply)
	err := c.cc.Invoke(ctx, User_UpdateUserPasswd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetLoginVerifyCode(ctx context.Context, in *GetLoginVerifyCodeReq, opts ...grpc.CallOption) (*GetLoginVerifyCodeReply, error) {
	out := new(GetLoginVerifyCodeReply)
	err := c.cc.Invoke(ctx, User_GetLoginVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginByVerifyCode(ctx context.Context, in *LoginByVerifyCodeReq, opts ...grpc.CallOption) (*LoginByVerifyCodeReply, error) {
	out := new(LoginByVerifyCodeReply)
	err := c.cc.Invoke(ctx, User_LoginByVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, User_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserByToken(ctx context.Context, in *GetUserByTokenReq, opts ...grpc.CallOption) (*GetUserByTokenReply, error) {
	out := new(GetUserByTokenReply)
	err := c.cc.Invoke(ctx, User_GetUserByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserByUuid(ctx context.Context, in *GetUserByUuidReq, opts ...grpc.CallOption) (*GetUserByUuidReply, error) {
	out := new(GetUserByUuidReply)
	err := c.cc.Invoke(ctx, User_GetUserByUuid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateOrganization(ctx context.Context, in *CreateOrganizationReq, opts ...grpc.CallOption) (*CreateOrganizationReply, error) {
	out := new(CreateOrganizationReply)
	err := c.cc.Invoke(ctx, User_CreateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelOrganization(ctx context.Context, in *DelOrganizationReq, opts ...grpc.CallOption) (*DelOrganizationReply, error) {
	out := new(DelOrganizationReply)
	err := c.cc.Invoke(ctx, User_DelOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserJoinOrganization(ctx context.Context, in *UserJoinOrganizationReq, opts ...grpc.CallOption) (*UserJoinOrganizationReply, error) {
	out := new(UserJoinOrganizationReply)
	err := c.cc.Invoke(ctx, User_UserJoinOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserJoinOrganizationHis(ctx context.Context, in *GetUserJoinOrganizationHisReq, opts ...grpc.CallOption) (*GetUserJoinOrganizationHisReply, error) {
	out := new(GetUserJoinOrganizationHisReply)
	err := c.cc.Invoke(ctx, User_GetUserJoinOrganizationHis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetOrganizationJoinHis(ctx context.Context, in *GetOrganizationJoinHisReq, opts ...grpc.CallOption) (*GetOrganizationJoinHisReply, error) {
	out := new(GetOrganizationJoinHisReply)
	err := c.cc.Invoke(ctx, User_GetOrganizationJoinHis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ManageUserJoinOrganization(ctx context.Context, in *ManageUserJoinOrganizationReq, opts ...grpc.CallOption) (*ManageUserJoinOrganizationReply, error) {
	out := new(ManageUserJoinOrganizationReply)
	err := c.cc.Invoke(ctx, User_ManageUserJoinOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserLeaveOrganization(ctx context.Context, in *UserLeaveOrganizationReq, opts ...grpc.CallOption) (*UserLeaveOrganizationReply, error) {
	out := new(UserLeaveOrganizationReply)
	err := c.cc.Invoke(ctx, User_UserLeaveOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EvictionUserOrganization(ctx context.Context, in *EvictionUserOrganizationReq, opts ...grpc.CallOption) (*EvictionUserOrganizationReply, error) {
	out := new(EvictionUserOrganizationReply)
	err := c.cc.Invoke(ctx, User_EvictionUserOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetOrganizationUser(ctx context.Context, in *GetOrganizationUserReq, opts ...grpc.CallOption) (*GetOrganizationUserReply, error) {
	out := new(GetOrganizationUserReply)
	err := c.cc.Invoke(ctx, User_GetOrganizationUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserOrganization(ctx context.Context, in *GetUserOrganizationReq, opts ...grpc.CallOption) (*GetUserOrganizationReply, error) {
	out := new(GetUserOrganizationReply)
	err := c.cc.Invoke(ctx, User_GetUserOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserOrganizationInfo(ctx context.Context, in *GetUserOrganizationInfoReq, opts ...grpc.CallOption) (*GetUserOrganizationInfoReply, error) {
	out := new(GetUserOrganizationInfoReply)
	err := c.cc.Invoke(ctx, User_GetUserOrganizationInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VerifyUserInOrg(ctx context.Context, in *VerifyUserInOrgReq, opts ...grpc.CallOption) (*VerifyUserInOrgReply, error) {
	out := new(VerifyUserInOrgReply)
	err := c.cc.Invoke(ctx, User_VerifyUserInOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddOrganizationDingTalk(ctx context.Context, in *AddOrganizationDingTalkReq, opts ...grpc.CallOption) (*AddOrganizationDingTalkReply, error) {
	out := new(AddOrganizationDingTalkReply)
	err := c.cc.Invoke(ctx, User_AddOrganizationDingTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetOrganizationDingTalk(ctx context.Context, in *GetOrganizationDingTalkReq, opts ...grpc.CallOption) (*GetOrganizationDingTalkReply, error) {
	out := new(GetOrganizationDingTalkReply)
	err := c.cc.Invoke(ctx, User_GetOrganizationDingTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelOrganizationDingTalk(ctx context.Context, in *DelOrganizationDingTalkReq, opts ...grpc.CallOption) (*DelOrganizationDingTalkReply, error) {
	out := new(DelOrganizationDingTalkReply)
	err := c.cc.Invoke(ctx, User_DelOrganizationDingTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetOrganizationDingTalkToken(ctx context.Context, in *GetOrganizationDingTalkTokenReq, opts ...grpc.CallOption) (*GetOrganizationDingTalkTokenReply, error) {
	out := new(GetOrganizationDingTalkTokenReply)
	err := c.cc.Invoke(ctx, User_GetOrganizationDingTalkToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddOrganizationDingTalkLogin(ctx context.Context, in *AddOrganizationDingTalkLoginReq, opts ...grpc.CallOption) (*AddOrganizationDingTalkLoginReply, error) {
	out := new(AddOrganizationDingTalkLoginReply)
	err := c.cc.Invoke(ctx, User_AddOrganizationDingTalkLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetOrganizationDingTalkLogin(ctx context.Context, in *GetOrganizationDingTalkLoginReq, opts ...grpc.CallOption) (*GetOrganizationDingTalkLoginReply, error) {
	out := new(GetOrganizationDingTalkLoginReply)
	err := c.cc.Invoke(ctx, User_GetOrganizationDingTalkLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelOrganizationDingTalkLogin(ctx context.Context, in *DelOrganizationDingTalkLoginReq, opts ...grpc.CallOption) (*DelOrganizationDingTalkLoginReply, error) {
	out := new(DelOrganizationDingTalkLoginReply)
	err := c.cc.Invoke(ctx, User_DelOrganizationDingTalkLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetOrganizationDingTalkLoginUrl(ctx context.Context, in *GetOrganizationDingTalkLoginUrlReq, opts ...grpc.CallOption) (*GetOrganizationDingTalkLoginUrlReply, error) {
	out := new(GetOrganizationDingTalkLoginUrlReply)
	err := c.cc.Invoke(ctx, User_GetOrganizationDingTalkLoginUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) OrganizationDingTalkLogin(ctx context.Context, in *OrganizationDingTalkLoginReq, opts ...grpc.CallOption) (*OrganizationDingTalkLoginReply, error) {
	out := new(OrganizationDingTalkLoginReply)
	err := c.cc.Invoke(ctx, User_OrganizationDingTalkLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetOrganizationDingTalkUser(ctx context.Context, in *GetOrganizationDingTalkUserReq, opts ...grpc.CallOption) (*GetOrganizationDingTalkUserReply, error) {
	out := new(GetOrganizationDingTalkUserReply)
	err := c.cc.Invoke(ctx, User_GetOrganizationDingTalkUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EncryptionWithSalt(ctx context.Context, in *EncryptionWithSaltReq, opts ...grpc.CallOption) (*EncryptionWithSaltReply, error) {
	out := new(EncryptionWithSaltReply)
	err := c.cc.Invoke(ctx, User_EncryptionWithSalt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DecryptionWithSalt(ctx context.Context, in *DecryptionWithSaltReq, opts ...grpc.CallOption) (*DecryptionWithSaltReply, error) {
	out := new(DecryptionWithSaltReply)
	err := c.cc.Invoke(ctx, User_DecryptionWithSalt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 1.1 注册用户
	GetRegisterUserVerifyCode(context.Context, *GetRegisterUserVerifyCodeReq) (*GetRegisterUserVerifyCodeReply, error)
	Register(context.Context, *RegisterUserReq) (*RegisterUserReply, error)
	//rpc RegisterFromDingTalk (RegisterDingTalkUserReq) returns (RegisterDingTalkUserReply) {};
	// 1.2 验证用户是否存在
	ExistUser(context.Context, *ExistUserReq) (*ExistUserReply, error)
	// 1.3 更新用户密码
	// 获取忘记密码/更新密码验证码
	GetForgotPasswdVerifyCode(context.Context, *GetForgotPasswdVerifyCodeReq) (*GetForgotPasswdVerifyCodeReply, error)
	GetUpdateUserPasswdVerifyCode(context.Context, *GetUpdateUserPasswdVerifyCodeReq) (*GetUpdateUserPasswdVerifyCodeReply, error)
	UpdateForgotPasswd(context.Context, *UpdateForgotPasswdReq) (*UpdateForgotPasswdReply, error)
	UpdateUserPasswd(context.Context, *UpdateUserPasswdReq) (*UpdateUserPasswdReply, error)
	// 1.4 用户登录
	GetLoginVerifyCode(context.Context, *GetLoginVerifyCodeReq) (*GetLoginVerifyCodeReply, error)
	LoginByVerifyCode(context.Context, *LoginByVerifyCodeReq) (*LoginByVerifyCodeReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	// 1.5 用户登出
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	// 1.6 使用Token获取用户信息
	GetUserByToken(context.Context, *GetUserByTokenReq) (*GetUserByTokenReply, error)
	// 1.7 通过Uuid获取用户信息 - 因为没有鉴权，调用方需要确认严格确认是否需要调用该接口
	GetUserByUuid(context.Context, *GetUserByUuidReq) (*GetUserByUuidReply, error)
	// 2. organization
	// 2.1 创建组织
	CreateOrganization(context.Context, *CreateOrganizationReq) (*CreateOrganizationReply, error)
	// 获取组织
	//rpc GetOrganization (GetOrganizationReq) returns (GetOrganizationReply) {};
	// 2.2 删除组织
	DelOrganization(context.Context, *DelOrganizationReq) (*DelOrganizationReply, error)
	// 2.3.1 用户加入组织
	UserJoinOrganization(context.Context, *UserJoinOrganizationReq) (*UserJoinOrganizationReply, error)
	// 2.3.2 获取用户加入组织历史 - 用户访问
	GetUserJoinOrganizationHis(context.Context, *GetUserJoinOrganizationHisReq) (*GetUserJoinOrganizationHisReply, error)
	// 2.3.3 获取组织被用户申请历史 - 组织管理员访问
	GetOrganizationJoinHis(context.Context, *GetOrganizationJoinHisReq) (*GetOrganizationJoinHisReply, error)
	// 2.3.4 管理用户加入组织 - 组织管理员访问 - 同意/拒绝用户加入
	ManageUserJoinOrganization(context.Context, *ManageUserJoinOrganizationReq) (*ManageUserJoinOrganizationReply, error)
	// 2.4 用户离开组织
	UserLeaveOrganization(context.Context, *UserLeaveOrganizationReq) (*UserLeaveOrganizationReply, error)
	// 2.5 驱逐用户离开组织
	EvictionUserOrganization(context.Context, *EvictionUserOrganizationReq) (*EvictionUserOrganizationReply, error)
	// 2.6.1 获取组织内用户
	GetOrganizationUser(context.Context, *GetOrganizationUserReq) (*GetOrganizationUserReply, error)
	// 2.6.2 获取用户的组织
	GetUserOrganization(context.Context, *GetUserOrganizationReq) (*GetUserOrganizationReply, error)
	// 获取用户 组织uuid 的信息
	GetUserOrganizationInfo(context.Context, *GetUserOrganizationInfoReq) (*GetUserOrganizationInfoReply, error)
	// 2.7 验证用户在组织内
	VerifyUserInOrg(context.Context, *VerifyUserInOrgReq) (*VerifyUserInOrgReply, error)
	// 2.8 组织钉钉配置
	// 2.8.1 添加组织钉钉配置
	AddOrganizationDingTalk(context.Context, *AddOrganizationDingTalkReq) (*AddOrganizationDingTalkReply, error)
	// 2.8.2 获取组织钉钉配置
	GetOrganizationDingTalk(context.Context, *GetOrganizationDingTalkReq) (*GetOrganizationDingTalkReply, error)
	// 2.8.3 删除组织钉钉配置
	DelOrganizationDingTalk(context.Context, *DelOrganizationDingTalkReq) (*DelOrganizationDingTalkReply, error)
	// 2.8.4 获取组织钉钉token
	GetOrganizationDingTalkToken(context.Context, *GetOrganizationDingTalkTokenReq) (*GetOrganizationDingTalkTokenReply, error)
	// 2.9 组织钉钉登录
	// 2.9.1 添加组织钉钉登录信息
	AddOrganizationDingTalkLogin(context.Context, *AddOrganizationDingTalkLoginReq) (*AddOrganizationDingTalkLoginReply, error)
	// 2.9.2 添加组织钉钉登录信息
	GetOrganizationDingTalkLogin(context.Context, *GetOrganizationDingTalkLoginReq) (*GetOrganizationDingTalkLoginReply, error)
	// 2.9.3 添加组织钉钉登录信息
	DelOrganizationDingTalkLogin(context.Context, *DelOrganizationDingTalkLoginReq) (*DelOrganizationDingTalkLoginReply, error)
	// 2.9.4 获取钉钉登录Url
	GetOrganizationDingTalkLoginUrl(context.Context, *GetOrganizationDingTalkLoginUrlReq) (*GetOrganizationDingTalkLoginUrlReply, error)
	// 2.9.5 钉钉登录-钉钉服务回调请求
	OrganizationDingTalkLogin(context.Context, *OrganizationDingTalkLoginReq) (*OrganizationDingTalkLoginReply, error)
	// 2.9.6 获取用户组织钉钉用户信息
	GetOrganizationDingTalkUser(context.Context, *GetOrganizationDingTalkUserReq) (*GetOrganizationDingTalkUserReply, error)
	// 3.1 使用 salt 加密字符串
	EncryptionWithSalt(context.Context, *EncryptionWithSaltReq) (*EncryptionWithSaltReply, error)
	// 3.2 使用 salt 解密字符串
	DecryptionWithSalt(context.Context, *DecryptionWithSaltReq) (*DecryptionWithSaltReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetRegisterUserVerifyCode(context.Context, *GetRegisterUserVerifyCodeReq) (*GetRegisterUserVerifyCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisterUserVerifyCode not implemented")
}
func (UnimplementedUserServer) Register(context.Context, *RegisterUserReq) (*RegisterUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) ExistUser(context.Context, *ExistUserReq) (*ExistUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUser not implemented")
}
func (UnimplementedUserServer) GetForgotPasswdVerifyCode(context.Context, *GetForgotPasswdVerifyCodeReq) (*GetForgotPasswdVerifyCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForgotPasswdVerifyCode not implemented")
}
func (UnimplementedUserServer) GetUpdateUserPasswdVerifyCode(context.Context, *GetUpdateUserPasswdVerifyCodeReq) (*GetUpdateUserPasswdVerifyCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateUserPasswdVerifyCode not implemented")
}
func (UnimplementedUserServer) UpdateForgotPasswd(context.Context, *UpdateForgotPasswdReq) (*UpdateForgotPasswdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForgotPasswd not implemented")
}
func (UnimplementedUserServer) UpdateUserPasswd(context.Context, *UpdateUserPasswdReq) (*UpdateUserPasswdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPasswd not implemented")
}
func (UnimplementedUserServer) GetLoginVerifyCode(context.Context, *GetLoginVerifyCodeReq) (*GetLoginVerifyCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginVerifyCode not implemented")
}
func (UnimplementedUserServer) LoginByVerifyCode(context.Context, *LoginByVerifyCodeReq) (*LoginByVerifyCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByVerifyCode not implemented")
}
func (UnimplementedUserServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServer) GetUserByToken(context.Context, *GetUserByTokenReq) (*GetUserByTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByToken not implemented")
}
func (UnimplementedUserServer) GetUserByUuid(context.Context, *GetUserByUuidReq) (*GetUserByUuidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUuid not implemented")
}
func (UnimplementedUserServer) CreateOrganization(context.Context, *CreateOrganizationReq) (*CreateOrganizationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedUserServer) DelOrganization(context.Context, *DelOrganizationReq) (*DelOrganizationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrganization not implemented")
}
func (UnimplementedUserServer) UserJoinOrganization(context.Context, *UserJoinOrganizationReq) (*UserJoinOrganizationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserJoinOrganization not implemented")
}
func (UnimplementedUserServer) GetUserJoinOrganizationHis(context.Context, *GetUserJoinOrganizationHisReq) (*GetUserJoinOrganizationHisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserJoinOrganizationHis not implemented")
}
func (UnimplementedUserServer) GetOrganizationJoinHis(context.Context, *GetOrganizationJoinHisReq) (*GetOrganizationJoinHisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationJoinHis not implemented")
}
func (UnimplementedUserServer) ManageUserJoinOrganization(context.Context, *ManageUserJoinOrganizationReq) (*ManageUserJoinOrganizationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageUserJoinOrganization not implemented")
}
func (UnimplementedUserServer) UserLeaveOrganization(context.Context, *UserLeaveOrganizationReq) (*UserLeaveOrganizationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLeaveOrganization not implemented")
}
func (UnimplementedUserServer) EvictionUserOrganization(context.Context, *EvictionUserOrganizationReq) (*EvictionUserOrganizationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvictionUserOrganization not implemented")
}
func (UnimplementedUserServer) GetOrganizationUser(context.Context, *GetOrganizationUserReq) (*GetOrganizationUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationUser not implemented")
}
func (UnimplementedUserServer) GetUserOrganization(context.Context, *GetUserOrganizationReq) (*GetUserOrganizationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrganization not implemented")
}
func (UnimplementedUserServer) GetUserOrganizationInfo(context.Context, *GetUserOrganizationInfoReq) (*GetUserOrganizationInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrganizationInfo not implemented")
}
func (UnimplementedUserServer) VerifyUserInOrg(context.Context, *VerifyUserInOrgReq) (*VerifyUserInOrgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserInOrg not implemented")
}
func (UnimplementedUserServer) AddOrganizationDingTalk(context.Context, *AddOrganizationDingTalkReq) (*AddOrganizationDingTalkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationDingTalk not implemented")
}
func (UnimplementedUserServer) GetOrganizationDingTalk(context.Context, *GetOrganizationDingTalkReq) (*GetOrganizationDingTalkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationDingTalk not implemented")
}
func (UnimplementedUserServer) DelOrganizationDingTalk(context.Context, *DelOrganizationDingTalkReq) (*DelOrganizationDingTalkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrganizationDingTalk not implemented")
}
func (UnimplementedUserServer) GetOrganizationDingTalkToken(context.Context, *GetOrganizationDingTalkTokenReq) (*GetOrganizationDingTalkTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationDingTalkToken not implemented")
}
func (UnimplementedUserServer) AddOrganizationDingTalkLogin(context.Context, *AddOrganizationDingTalkLoginReq) (*AddOrganizationDingTalkLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationDingTalkLogin not implemented")
}
func (UnimplementedUserServer) GetOrganizationDingTalkLogin(context.Context, *GetOrganizationDingTalkLoginReq) (*GetOrganizationDingTalkLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationDingTalkLogin not implemented")
}
func (UnimplementedUserServer) DelOrganizationDingTalkLogin(context.Context, *DelOrganizationDingTalkLoginReq) (*DelOrganizationDingTalkLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrganizationDingTalkLogin not implemented")
}
func (UnimplementedUserServer) GetOrganizationDingTalkLoginUrl(context.Context, *GetOrganizationDingTalkLoginUrlReq) (*GetOrganizationDingTalkLoginUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationDingTalkLoginUrl not implemented")
}
func (UnimplementedUserServer) OrganizationDingTalkLogin(context.Context, *OrganizationDingTalkLoginReq) (*OrganizationDingTalkLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrganizationDingTalkLogin not implemented")
}
func (UnimplementedUserServer) GetOrganizationDingTalkUser(context.Context, *GetOrganizationDingTalkUserReq) (*GetOrganizationDingTalkUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationDingTalkUser not implemented")
}
func (UnimplementedUserServer) EncryptionWithSalt(context.Context, *EncryptionWithSaltReq) (*EncryptionWithSaltReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptionWithSalt not implemented")
}
func (UnimplementedUserServer) DecryptionWithSalt(context.Context, *DecryptionWithSaltReq) (*DecryptionWithSaltReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptionWithSalt not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetRegisterUserVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisterUserVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetRegisterUserVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetRegisterUserVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetRegisterUserVerifyCode(ctx, req.(*GetRegisterUserVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ExistUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ExistUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ExistUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ExistUser(ctx, req.(*ExistUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetForgotPasswdVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForgotPasswdVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetForgotPasswdVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetForgotPasswdVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetForgotPasswdVerifyCode(ctx, req.(*GetForgotPasswdVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUpdateUserPasswdVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateUserPasswdVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUpdateUserPasswdVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUpdateUserPasswdVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUpdateUserPasswdVerifyCode(ctx, req.(*GetUpdateUserPasswdVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateForgotPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateForgotPasswdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateForgotPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateForgotPasswd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateForgotPasswd(ctx, req.(*UpdateForgotPasswdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserPasswd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserPasswd(ctx, req.(*UpdateUserPasswdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetLoginVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetLoginVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetLoginVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetLoginVerifyCode(ctx, req.(*GetLoginVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginByVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginByVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_LoginByVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginByVerifyCode(ctx, req.(*LoginByVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByToken(ctx, req.(*GetUserByTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUuidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserByUuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByUuid(ctx, req.(*GetUserByUuidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateOrganization(ctx, req.(*CreateOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelOrganization(ctx, req.(*DelOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserJoinOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserJoinOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserJoinOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserJoinOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserJoinOrganization(ctx, req.(*UserJoinOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserJoinOrganizationHis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserJoinOrganizationHisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserJoinOrganizationHis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserJoinOrganizationHis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserJoinOrganizationHis(ctx, req.(*GetUserJoinOrganizationHisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetOrganizationJoinHis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationJoinHisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetOrganizationJoinHis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetOrganizationJoinHis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetOrganizationJoinHis(ctx, req.(*GetOrganizationJoinHisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ManageUserJoinOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageUserJoinOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ManageUserJoinOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ManageUserJoinOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ManageUserJoinOrganization(ctx, req.(*ManageUserJoinOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserLeaveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLeaveOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLeaveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserLeaveOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLeaveOrganization(ctx, req.(*UserLeaveOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EvictionUserOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictionUserOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EvictionUserOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EvictionUserOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EvictionUserOrganization(ctx, req.(*EvictionUserOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetOrganizationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetOrganizationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetOrganizationUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetOrganizationUser(ctx, req.(*GetOrganizationUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserOrganization(ctx, req.(*GetUserOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserOrganizationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOrganizationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserOrganizationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserOrganizationInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserOrganizationInfo(ctx, req.(*GetUserOrganizationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VerifyUserInOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserInOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VerifyUserInOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_VerifyUserInOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VerifyUserInOrg(ctx, req.(*VerifyUserInOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddOrganizationDingTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationDingTalkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddOrganizationDingTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddOrganizationDingTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddOrganizationDingTalk(ctx, req.(*AddOrganizationDingTalkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetOrganizationDingTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationDingTalkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetOrganizationDingTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetOrganizationDingTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetOrganizationDingTalk(ctx, req.(*GetOrganizationDingTalkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelOrganizationDingTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOrganizationDingTalkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelOrganizationDingTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelOrganizationDingTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelOrganizationDingTalk(ctx, req.(*DelOrganizationDingTalkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetOrganizationDingTalkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationDingTalkTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetOrganizationDingTalkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetOrganizationDingTalkToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetOrganizationDingTalkToken(ctx, req.(*GetOrganizationDingTalkTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddOrganizationDingTalkLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationDingTalkLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddOrganizationDingTalkLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddOrganizationDingTalkLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddOrganizationDingTalkLogin(ctx, req.(*AddOrganizationDingTalkLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetOrganizationDingTalkLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationDingTalkLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetOrganizationDingTalkLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetOrganizationDingTalkLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetOrganizationDingTalkLogin(ctx, req.(*GetOrganizationDingTalkLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelOrganizationDingTalkLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOrganizationDingTalkLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelOrganizationDingTalkLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelOrganizationDingTalkLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelOrganizationDingTalkLogin(ctx, req.(*DelOrganizationDingTalkLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetOrganizationDingTalkLoginUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationDingTalkLoginUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetOrganizationDingTalkLoginUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetOrganizationDingTalkLoginUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetOrganizationDingTalkLoginUrl(ctx, req.(*GetOrganizationDingTalkLoginUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_OrganizationDingTalkLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationDingTalkLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).OrganizationDingTalkLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_OrganizationDingTalkLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).OrganizationDingTalkLogin(ctx, req.(*OrganizationDingTalkLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetOrganizationDingTalkUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationDingTalkUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetOrganizationDingTalkUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetOrganizationDingTalkUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetOrganizationDingTalkUser(ctx, req.(*GetOrganizationDingTalkUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EncryptionWithSalt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionWithSaltReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EncryptionWithSalt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EncryptionWithSalt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EncryptionWithSalt(ctx, req.(*EncryptionWithSaltReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DecryptionWithSalt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptionWithSaltReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DecryptionWithSalt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DecryptionWithSalt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DecryptionWithSalt(ctx, req.(*DecryptionWithSaltReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegisterUserVerifyCode",
			Handler:    _User_GetRegisterUserVerifyCode_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "ExistUser",
			Handler:    _User_ExistUser_Handler,
		},
		{
			MethodName: "GetForgotPasswdVerifyCode",
			Handler:    _User_GetForgotPasswdVerifyCode_Handler,
		},
		{
			MethodName: "GetUpdateUserPasswdVerifyCode",
			Handler:    _User_GetUpdateUserPasswdVerifyCode_Handler,
		},
		{
			MethodName: "UpdateForgotPasswd",
			Handler:    _User_UpdateForgotPasswd_Handler,
		},
		{
			MethodName: "UpdateUserPasswd",
			Handler:    _User_UpdateUserPasswd_Handler,
		},
		{
			MethodName: "GetLoginVerifyCode",
			Handler:    _User_GetLoginVerifyCode_Handler,
		},
		{
			MethodName: "LoginByVerifyCode",
			Handler:    _User_LoginByVerifyCode_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _User_Logout_Handler,
		},
		{
			MethodName: "GetUserByToken",
			Handler:    _User_GetUserByToken_Handler,
		},
		{
			MethodName: "GetUserByUuid",
			Handler:    _User_GetUserByUuid_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _User_CreateOrganization_Handler,
		},
		{
			MethodName: "DelOrganization",
			Handler:    _User_DelOrganization_Handler,
		},
		{
			MethodName: "UserJoinOrganization",
			Handler:    _User_UserJoinOrganization_Handler,
		},
		{
			MethodName: "GetUserJoinOrganizationHis",
			Handler:    _User_GetUserJoinOrganizationHis_Handler,
		},
		{
			MethodName: "GetOrganizationJoinHis",
			Handler:    _User_GetOrganizationJoinHis_Handler,
		},
		{
			MethodName: "ManageUserJoinOrganization",
			Handler:    _User_ManageUserJoinOrganization_Handler,
		},
		{
			MethodName: "UserLeaveOrganization",
			Handler:    _User_UserLeaveOrganization_Handler,
		},
		{
			MethodName: "EvictionUserOrganization",
			Handler:    _User_EvictionUserOrganization_Handler,
		},
		{
			MethodName: "GetOrganizationUser",
			Handler:    _User_GetOrganizationUser_Handler,
		},
		{
			MethodName: "GetUserOrganization",
			Handler:    _User_GetUserOrganization_Handler,
		},
		{
			MethodName: "GetUserOrganizationInfo",
			Handler:    _User_GetUserOrganizationInfo_Handler,
		},
		{
			MethodName: "VerifyUserInOrg",
			Handler:    _User_VerifyUserInOrg_Handler,
		},
		{
			MethodName: "AddOrganizationDingTalk",
			Handler:    _User_AddOrganizationDingTalk_Handler,
		},
		{
			MethodName: "GetOrganizationDingTalk",
			Handler:    _User_GetOrganizationDingTalk_Handler,
		},
		{
			MethodName: "DelOrganizationDingTalk",
			Handler:    _User_DelOrganizationDingTalk_Handler,
		},
		{
			MethodName: "GetOrganizationDingTalkToken",
			Handler:    _User_GetOrganizationDingTalkToken_Handler,
		},
		{
			MethodName: "AddOrganizationDingTalkLogin",
			Handler:    _User_AddOrganizationDingTalkLogin_Handler,
		},
		{
			MethodName: "GetOrganizationDingTalkLogin",
			Handler:    _User_GetOrganizationDingTalkLogin_Handler,
		},
		{
			MethodName: "DelOrganizationDingTalkLogin",
			Handler:    _User_DelOrganizationDingTalkLogin_Handler,
		},
		{
			MethodName: "GetOrganizationDingTalkLoginUrl",
			Handler:    _User_GetOrganizationDingTalkLoginUrl_Handler,
		},
		{
			MethodName: "OrganizationDingTalkLogin",
			Handler:    _User_OrganizationDingTalkLogin_Handler,
		},
		{
			MethodName: "GetOrganizationDingTalkUser",
			Handler:    _User_GetOrganizationDingTalkUser_Handler,
		},
		{
			MethodName: "EncryptionWithSalt",
			Handler:    _User_EncryptionWithSalt_Handler,
		},
		{
			MethodName: "DecryptionWithSalt",
			Handler:    _User_DecryptionWithSalt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}
